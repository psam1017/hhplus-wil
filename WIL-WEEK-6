### 1. 문제 **(과제, 프로젝트를 진행하면서 부딪혔던 기술적인 문제)**

- 분산락: 분산락의 개념이 필요한 이유에 대한 이해가 좀 부족했습니다. 그래서 보고서 쓰는 데 쓴 시간이 75% 는 넘은 거 같네요.
- 분산락 적용 시 하나의 트랜잭션 사용 중에 또 REQUIRES_NEW 로 다른 트랜잭션을 가져오는데 락도 걸리니까 트랜잭션과 락 사이의 데드락이 발생했습니다.

### **2. 시도**

- 블로그 포스트를 보면서, 굳이 커스텀하지 않고 그대로 소스코드를 참고하여 분산락을 적용했습니다.

### **3. 해결**

- 락을 걸 때는 트랜잭션 하나만 사용함으로 데드락을 예방했습니다.

### **4. 알게된 것**

- 분산락의 개념과 트랜잭션 전파 속성, 보상 트랜잭션 개념

### **Keep : 현재 만족하고 계속 유지할 부분**

- 충분히 자료조사하고 적용할 수 있었던 점

### **Problem : 개선이 필요하다고 생각하는 문제점**

- 더 많은 테스트 코드가 필요합니다. AOP 에 대한 테스트, 더 많은 동시성 테스트
- 보상 트랜잭션 코드가 비교적 복잡하고, 유스케이스에서 성공 로직과 보상 로직을 모두 혼자서 수행하고 있음.

### **Try : 문제점을 해결하기 위해 시도해야 할 것**

- 더 많은 테스트 코드가 작성하기
- 보상 트랜잭션을 사용하는 데 여러 가지 패턴과 방법이 있던데 알아볼 필요가 있겠습니다. ex) 이벤트, 비동기, 배치 처리 등

사용 태그 #항해플러스 #항해99
